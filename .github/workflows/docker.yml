name: Docker Image

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to registry
        if: ${{ secrets.REGISTRY != '' && secrets.REGISTRY_USERNAME != '' && secrets.REGISTRY_PASSWORD != '' }}
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Extract tags and labels
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.REGISTRY != '' && secrets.IMAGE_NAME != '' && format('{0}/{1}', secrets.REGISTRY, secrets.IMAGE_NAME) || 'local/yyc-ai-lan' }}
          tags: |
            type=raw,value=${{ github.ref_name }}
            type=sha

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          push: ${{ secrets.REGISTRY != '' && secrets.IMAGE_NAME != '' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Trigger Kubernetes deploy workflow
        if: ${{ secrets.REGISTRY != '' && secrets.IMAGE_NAME != '' && secrets.KUBE_CONFIG != '' }}
        uses: actions/github-script@v7
        env:
          IMAGE_URI: ${{ secrets.REGISTRY }}/${{ secrets.IMAGE_NAME }}:${{ github.ref_name }}
          K8S_INGRESS_HOST: ${{ secrets.K8S_INGRESS_HOST }}
          K8S_STRATEGY: ${{ secrets.K8S_STRATEGY }}
          K8S_CANARY_WEIGHT: ${{ secrets.K8S_CANARY_WEIGHT }}
          K8S_BLUE_TARGET: ${{ secrets.K8S_BLUE_TARGET }}
        with:
          script: |
            const image = process.env.IMAGE_URI;
            const host = process.env.K8S_INGRESS_HOST || 'app.example.com';
            const strategy = process.env.K8S_STRATEGY || 'canary';
            const canaryWeight = process.env.K8S_CANARY_WEIGHT || '10';
            const blueTarget = process.env.K8S_BLUE_TARGET || 'blue';
            core.info(`Dispatching k8s-deploy.yml with image=${image}, host=${host}, strategy=${strategy}, canaryWeight=${canaryWeight}, blueTarget=${blueTarget}`);
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'k8s-deploy.yml',
              ref: 'main',
              inputs: { image, host, strategy, canaryWeight, blueTarget }
            });